<!-- livebook:{"persist_outputs":true} -->

# Visualization

```elixir
Mix.install([
  {:kino, path: "../kino/", override: true},
  {:protean, path: "../protean/", override: true},
  {:protean_kino, path: "./", override: true}
])
```

<!-- livebook:{"output":true} -->

```
==> protean_kino
Compiling 1 file (.ex)
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Section

```elixir
import Protean.Builder

match(:foo, target: :bar)
```

<!-- livebook:{"output":true} -->

```
{#Function<42.3316493/1 in :erl_eval.expr/6>, [_meta: %{expr: :foo}, target: :bar]}
```

```elixir
defmodule MyMachine do
  use Protean

  @machine [
    initial: :parallel,
    states: [
      parallel(:parallel,
        entry: :foo,
        states: [
          compound(:parent,
            initial: :child1,
            on: [
              match(:goto_sibling, target: :"#sibling", actions: [:one, :other])
            ],
            states: [
              atomic(:child1,
                entry: Protean.Action.send(:message, to: :self),
                exit: "go do a thing",
                on: [
                  match(:goto_child2, target: :child2)
                ]
              ),
              atomic(:child2,
                on: [
                  match(%{foo: :bar}, actions: :do_a_thing, guard: {:not, :foo?})
                ]
              )
            ]
          ),
          atomic(:sibling)
        ]
      ),
      atomic(:sibling)
    ]
  ]

  @impl true
  def handle_action(_, state, _), do: state
end
```

<!-- livebook:{"output":true} -->

```
{:module, MyMachine, <<70, 79, 82, 49, 0, 0, 60, ...>>, {:handle_action, 3}}
```

```elixir
{:ok, machine, id} = Protean.start_machine(MyMachine)
```

<!-- livebook:{"output":true} -->

```
{:ok,
 {:via, Registry,
  {Protean.ProcessManager.Registry, {MyMachine, "b33c6244-f7e2-4ce4-982d-a207cb069c54"}}},
 "b33c6244-f7e2-4ce4-982d-a207cb069c54"}
```

```elixir
Protean.Kino.machine(MyMachine.__protean_machine__())
```

<!-- livebook:{"output":true} -->

```
[lib/protean_kino/machine.ex:9: Protean.Kino.Machine.new/1]
ast #=> %{
  states: [
    %{
      actions: [],
      name: "#",
      statemachine: %{
        states: [
          %{
            actions: [%{body: ":foo", type: "entry"}],
            name: "#.parallel",
            statemachine: %{
              states: [
                %{
                  actions: [],
                  name: "#.parallel.parent",
                  statemachine: %{
                    states: [
                      %{
                        actions: [
                          %{body: "{:send, :message, :self}", type: "entry"},
                          %{body: "\"go do a thing\"", type: "exit"}
                        ],
                        name: "#.parallel.parent.child1",
                        type: "regular"
                      },
                      %{
                        actions: [],
                        name: "#.parallel.parent.child2",
                        type: "regular"
                      }
                    ],
                    transitions: [
                      %{
                        action: "",
                        from: "#.parallel.parent.child1",
                        label: ":goto_child2",
                        to: "#.parallel.parent.child2"
                      },
                      %{
                        action: ":do_a_thing",
                        from: "#.parallel.parent.child2",
                        label: "%{foo: :bar} [{:not, :foo?}] / :do_a_thing",
                        to: "#.parallel.parent.child2"
                      }
                    ]
                  },
                  type: "regular"
                },
                %{actions: [], name: "#.parallel.sibling", type: "regular"}
              ],
              transitions: [
                %{
                  action: ":one, :other",
                  from: "#.parallel.parent",
                  label: ":goto_sibling / :one, :other",
                  to: "#.sibling"
                }
              ]
            },
            type: "parallel"
          },
          %{actions: [], name: "#.sibling", type: "regular"}
        ],
        transitions: []
      },
      type: "regular"
    }
  ],
  transitions: []
}


```
